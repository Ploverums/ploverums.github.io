export declare type Options = {
    licenseKey: string | null;
    color: string | string[];
    opacity: number;
    size: number;
    focusableElements: string;
    focusableElementsOffsetX: number;
    focusableElementsOffsetY: number;
    zIndex: number;
    invert: boolean;
    dotColor: string | null;
    dotSize: number;
    magnetic: boolean;
    mode: 'normal' | 'bouncy' | 'slow';
    radius: number;
    font: string;
    fontWeight: number;
    fontSize: number;
    fontColor: string;
    tooltipPadding: number;
};
export default class Blobity {
    private readonly canvas;
    private readonly ctx;
    private readonly kinetInstance;
    private readonly throttledMouseMove;
    private options;
    private initialized;
    private color;
    private fontColor;
    private stickedToElement;
    private sticketToElementTooltip;
    private disablingStickedToElementTimeout;
    private isActive;
    private globalStyles?;
    private destroyed;
    private currentMagnetic;
    private kinetPresets;
    private lastKnownCoordinates;
    private currentOffsetX;
    private currentOffsetY;
    private manuallySetFocusedElement;
    private manuallySetTooltipText;
    private disableTimeStamp;
    private prefersReducedMotionMediaQuery;
    private reduceMotionSetting;
    private kinetDefaultMethod;
    constructor(options?: Partial<Options>);
    updateOptions: (newOptions: Partial<Options>) => void;
    bounce(): void;
    destroy: () => void;
    private disable;
    private enable;
    private updatePrefersReducedMotionSetting;
    focusElement: (element: HTMLElement) => void;
    showTooltip: (text: string) => void;
    reset: () => void;
    private focusableElementMouseEnter;
    private focusableElementMouseLeave;
    private mouseDown;
    private mouseUp;
    private windowMouseEnter;
    private windowMouseLeave;
    private get activeTooltip();
    private get activeFocusedElement();
    private highlightElement;
    private displayTooltip;
    private mouseMove;
    private morph;
    private resetMorph;
    private clear;
    private render;
    private resize;
}
